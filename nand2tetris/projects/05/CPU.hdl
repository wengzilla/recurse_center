// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // *********** outM ***********
        // if MSB is 1, then use ALU output; if MSB is 0, then send instruction to A Register
        Mux16(a = instruction, b = aluOut, sel = instruction[15], out = instructionMuxOut);

        Not(in = instruction[15], out = addrInstruct);
        Not(in = addrInstruct, out = compInstruct);
        Or(a = addrInstruct, b = instruction[5], out = loadA);

        ARegister(in = instructionMuxOut, load = loadA, out = aRegOut);

        And(a = compInstruct, b = instruction[4], out = loadD);
        DRegister(in = aluOut, load = loadD, out = dataRegOut);
        Mux16(a = aRegOut, b = inM, sel = instruction[12], out = addrMemRegOut);

        ALU(x = dataRegOut, y = addrMemRegOut, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out=aluOut, zr=zero, ng=negative);

        And16(a = aluOut, b = true, out = outM);

    // *********** pc ***********
        PC(in = aRegOut, load = loadBit, inc = incBit, reset = reset, out=pcOut);
        DropMSB(in = pcOut, out = pc);

        // Jump Logic for Program Counter (pc)
        Or(a = negative, b = zero, out = negativeOrZero);
        Not(in = negativeOrZero, out = positive);
        And(a = negative, b = instruction[2], out = negativeMatch);
        And(a = zero, b = instruction[1], out = zeroMatch);
        And(a = positive, b = instruction[0], out = positiveMatch);

        Or(a = negativeMatch, b = zeroMatch, out = negativeZeroMatch);
        Or(a = negativeZeroMatch, b = positiveMatch, out = jumpMatch);
        And(a = jumpMatch, b = compInstruct, out = loadBit);

        Not(in = loadBit, out = incBit);

    // *********** addressM ***********
        DropMSB(in = aRegOut, out = addressM);

    // *********** writeM ***********
        And(a = instruction[3], b = instruction[15], out = writeM);
}