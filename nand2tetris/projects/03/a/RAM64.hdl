// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
      DMux8Way(in=load, sel=address[0..2], a=loadA, b=loadB, c=loadC, d=loadD, e=loadE, f=loadF, g=loadG, h=loadH);
      RAM8(in=in, load=loadA, address=address[3..5], out=ramOutA);
      RAM8(in=in, load=loadB, address=address[3..5], out=ramOutB);
      RAM8(in=in, load=loadC, address=address[3..5], out=ramOutC);
      RAM8(in=in, load=loadD, address=address[3..5], out=ramOutD);
      RAM8(in=in, load=loadE, address=address[3..5], out=ramOutE);
      RAM8(in=in, load=loadF, address=address[3..5], out=ramOutF);
      RAM8(in=in, load=loadG, address=address[3..5], out=ramOutG);
      RAM8(in=in, load=loadH, address=address[3..5], out=ramOutH);
      Mux8Way16(a=ramOutA, b=ramOutB, c=ramOutC, d=ramOutD, e=ramOutE, f=ramOutF, g=ramOutG, h=ramOutH, sel=address[0..2], out=out);
}